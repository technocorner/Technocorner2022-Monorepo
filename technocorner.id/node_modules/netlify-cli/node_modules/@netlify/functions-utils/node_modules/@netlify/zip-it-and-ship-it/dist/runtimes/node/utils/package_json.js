"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageJsonIfAvailable = exports.getPackageJson = exports.sanitisePackageJson = void 0;
const fs_1 = require("fs");
const pkg_dir_1 = __importDefault(require("pkg-dir"));
const sanitiseFiles = (files) => {
    if (!Array.isArray(files)) {
        return undefined;
    }
    return files.filter((file) => typeof file === 'string');
};
const sanitisePackageJson = (packageJson) => ({
    ...packageJson,
    files: sanitiseFiles(packageJson.files),
});
exports.sanitisePackageJson = sanitisePackageJson;
// Retrieve the `package.json` of a specific project or module
const getPackageJson = async function (srcDir) {
    const packageRoot = await (0, pkg_dir_1.default)(srcDir);
    if (packageRoot === undefined) {
        return {};
    }
    const packageJsonPath = `${packageRoot}/package.json`;
    try {
        // The path depends on the user's build, i.e. must be dynamic
        const packageJson = JSON.parse(await fs_1.promises.readFile(packageJsonPath, 'utf8'));
        return (0, exports.sanitisePackageJson)(packageJson);
    }
    catch (error) {
        throw new Error(`${packageJsonPath} is invalid JSON: ${error.message}`);
    }
};
exports.getPackageJson = getPackageJson;
const getPackageJsonIfAvailable = async (srcDir) => {
    try {
        const packageJson = await (0, exports.getPackageJson)(srcDir);
        return packageJson;
    }
    catch {
        return {};
    }
};
exports.getPackageJsonIfAvailable = getPackageJsonIfAvailable;
//# sourceMappingURL=package_json.js.map