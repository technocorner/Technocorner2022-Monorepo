{"version":3,"sources":["../../source/write/row.js"],"names":["generateRow","row","rowIndex","getStyle","getSharedString","customFont","dateFormat","usesSchema","rowNumber","rowHeight","rowCells","map","cell","columnIndex","align","alignVertical","fontWeight","fontStyle","height","wrap","color","backgroundColor","borderColor","borderStyle","leftBorderColor","leftBorderStyle","rightBorderColor","rightBorderStyle","topBorderColor","topBorderStyle","bottomBorderColor","bottomBorderStyle","type","value","format","isEmpty","undefined","detectValueType","String","Date","Number","Error","cellStyleId","join","Boolean"],"mappings":"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","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/rows/formatRow.js\r\n\r\nimport generateCell from './cell'\r\n\r\n// import Integer from '../types/Integer'\r\n\r\nexport default function generateRow(row, rowIndex, {\r\n\tgetStyle,\r\n\tgetSharedString,\r\n\tcustomFont,\r\n\tdateFormat,\r\n\tusesSchema\r\n}) {\r\n\t// To ensure the row number starts as in Excel.\r\n\tconst rowNumber = rowIndex + 1\r\n\tlet rowHeight\r\n\tconst rowCells = row\r\n\t\t.map((cell, columnIndex) => {\r\n\t\t\tconst {\r\n\t\t\t\talign,\r\n\t\t\t\talignVertical,\r\n\t\t\t\tfontWeight,\r\n\t\t\t\tfontStyle,\r\n\t\t\t\theight,\r\n\t\t\t\twrap,\r\n\t\t\t\tcolor,\r\n\t\t\t\tbackgroundColor,\r\n\t\t\t\tborderColor,\r\n\t\t\t\tborderStyle,\r\n\t\t\t\tleftBorderColor,\r\n\t\t\t\tleftBorderStyle,\r\n\t\t\t\trightBorderColor,\r\n\t\t\t\trightBorderStyle,\r\n\t\t\t\ttopBorderColor,\r\n\t\t\t\ttopBorderStyle,\r\n\t\t\t\tbottomBorderColor,\r\n\t\t\t\tbottomBorderStyle\r\n\t\t\t} = cell\r\n\r\n\t\t\tlet {\r\n\t\t\t\ttype,\r\n\t\t\t\tvalue,\r\n\t\t\t\tformat\r\n\t\t\t} = cell\r\n\r\n\t\t\tif (isEmpty(value)) {\r\n\t\t\t\tvalue = null\r\n\t\t\t} else {\r\n\t\t\t\t// Get cell value type.\r\n\t\t\t\tif (type === undefined) {\r\n\t\t\t\t\tif (!usesSchema) {\r\n\t\t\t\t\t\ttype = detectValueType(value)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (type === undefined) {\r\n\t\t\t\t\t\t// The default cell value type is `String`.\r\n\t\t\t\t\t\ttype = String\r\n\t\t\t\t\t\tvalue = String(value)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Validate `format` property.\r\n\t\t\tif (format) {\r\n\t\t\t\tif (type !== Date &&  type !== Number) { // && type !== Integer) {\r\n\t\t\t\t\tthrow new Error('`format` can only be used on `Date` or `Number` cells') // or `Integer` cells')\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (type === Date) {\r\n\t\t\t\t\tformat = dateFormat\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet cellStyleId\r\n\t\t\tif (\r\n\t\t\t\tfontWeight ||\r\n\t\t\t\tfontStyle ||\r\n\t\t\t\talign ||\r\n\t\t\t\talignVertical ||\r\n\t\t\t\tformat ||\r\n\t\t\t\twrap ||\r\n\t\t\t\tcolor ||\r\n\t\t\t\tbackgroundColor ||\r\n\t\t\t\tborderColor ||\r\n\t\t\t\tborderStyle ||\r\n\t\t\t\tleftBorderColor ||\r\n\t\t\t\tleftBorderStyle ||\r\n\t\t\t\trightBorderColor ||\r\n\t\t\t\trightBorderStyle ||\r\n\t\t\t\ttopBorderColor ||\r\n\t\t\t\ttopBorderStyle ||\r\n\t\t\t\tbottomBorderColor ||\r\n\t\t\t\tbottomBorderStyle ||\r\n\t\t\t\tcustomFont\r\n\t\t\t) {\r\n\t\t\t\tcellStyleId = getStyle(\r\n\t\t\t\t\tfontWeight,\r\n\t\t\t\t\tfontStyle,\r\n\t\t\t\t\talign,\r\n\t\t\t\t\talignVertical,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\twrap,\r\n\t\t\t\t\tcolor,\r\n\t\t\t\t\tbackgroundColor,\r\n\t\t\t\t\tborderColor,\r\n\t\t\t\t\tborderStyle,\r\n\t\t\t\t\tleftBorderColor,\r\n\t\t\t\t\tleftBorderStyle,\r\n\t\t\t\t\trightBorderColor,\r\n\t\t\t\t\trightBorderStyle,\r\n\t\t\t\t\ttopBorderColor,\r\n\t\t\t\t\ttopBorderStyle,\r\n\t\t\t\t\tbottomBorderColor,\r\n\t\t\t\t\tbottomBorderStyle\r\n\t\t\t\t)\r\n\t\t\t}\r\n\r\n\t\t\tif (height) {\r\n\t\t\t\tif (rowHeight === undefined || rowHeight < height) {\r\n\t\t\t\t\trowHeight = height\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn generateCell(\r\n\t\t\t\trowNumber,\r\n\t\t\t\tcolumnIndex,\r\n\t\t\t\tvalue,\r\n\t\t\t\ttype,\r\n\t\t\t\tcellStyleId,\r\n\t\t\t\tgetSharedString\r\n\t\t\t)\r\n\t\t})\r\n\t\t.join('')\r\n\r\n\treturn `<row r=\"${rowNumber}\"` +\r\n\t\t(rowHeight ? ` ht=\"${rowHeight}\" customHeight=\"1\"` : '') +\r\n\t\t'>' +\r\n\t\trowCells +\r\n\t\t'</row>'\r\n}\r\n\r\nfunction isEmpty(value) {\r\n  return value === undefined || value === null || value === ''\r\n}\r\n\r\nfunction detectValueType(value) {\r\n  switch (typeof value) {\r\n    case 'string':\r\n      return String\r\n    case 'number':\r\n      return Number\r\n    case 'boolean':\r\n      return Boolean\r\n    default:\r\n      if (value instanceof Date) {\r\n        return Date\r\n      }\r\n  }\r\n}"],"file":"row.js"}