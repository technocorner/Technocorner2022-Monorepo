{"version":3,"sources":["../../source/write/writeXlsxFile.common.js"],"names":["generateSheets","data","sheetName","sheetNames","schema","columns","headerStyle","fontFamily","fontSize","orientation","stickyRowsCount","stickyColumnsCount","dateFormat","getSharedStringsXml","getSharedString","getStylesXml","getStyle","Array","isArray","Error","worksheets","sheetIndex","sheet","push","customFont","sheetId","sheets","map","i","id","name"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEO,SAASA,cAAT,OAaJ;AAAA,MAZDC,IAYC,QAZDA,IAYC;AAAA,MAXDC,SAWC,QAXDA,SAWC;AAAA,MAVDC,UAUC,QAVDA,UAUC;AAAA,MATDC,MASC,QATDA,MASC;AAAA,MARDC,OAQC,QARDA,OAQC;AAAA,MAPDC,WAOC,QAPDA,WAOC;AAAA,MANDC,UAMC,QANDA,UAMC;AAAA,MALDC,QAKC,QALDA,QAKC;AAAA,MAJDC,WAIC,QAJDA,WAIC;AAAA,MAHDC,eAGC,QAHDA,eAGC;AAAA,MAFDC,kBAEC,QAFDA,kBAEC;AAAA,MADDC,UACC,QADDA,UACC;;AACD,2BAAiD,gCAAjD;AAAA,MAAQC,mBAAR,sBAAQA,mBAAR;AAAA,MAA6BC,eAA7B,sBAA6BA,eAA7B;;AACA,oBAAmC,wBAAW;AAAEP,IAAAA,UAAU,EAAVA,UAAF;AAAcC,IAAAA,QAAQ,EAARA;AAAd,GAAX,CAAnC;AAAA,MAAQO,YAAR,eAAQA,YAAR;AAAA,MAAsBC,QAAtB,eAAsBA,QAAtB,CAFC,CAID;AACA;AACA;;;AACA,MAAIb,UAAJ,EAAgB;AACd,QAAIE,OAAJ,EAAa;AACX,UAAI,CAACY,KAAK,CAACC,OAAN,CAAcb,OAAO,CAAC,CAAD,CAArB,CAAL,EAAgC;AAC9B,cAAM,IAAIc,KAAJ,CAAU,0GAAV,CAAN;AACD;AACF;AACF;;AAED,MAAI,CAAChB,UAAL,EAAiB;AACfA,IAAAA,UAAU,GAAG,CAACD,SAAS,IAAI,QAAd,CAAb;AACAD,IAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;;AACA,QAAII,OAAJ,EAAa;AACXA,MAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AACD,QAAID,MAAJ,EAAY;AACVA,MAAAA,MAAM,GAAG,CAACA,MAAD,CAAT;AACD;AACF;;AAED,MAAMgB,UAAU,GAAG,EAAnB;AACA,MAAIC,UAAU,GAAG,CAAjB;;AACA,uDAAoBlB,UAApB,wCAAgC;AAAA,QAArBmB,KAAqB;AAC9BF,IAAAA,UAAU,CAACG,IAAX,CAAgB,2BAAkBtB,IAAI,CAACoB,UAAD,CAAtB,EAAoC;AAClDjB,MAAAA,MAAM,EAAEA,MAAM,IAAIA,MAAM,CAACiB,UAAD,CAD0B;AAElDhB,MAAAA,OAAO,EAAEA,OAAO,IAAIA,OAAO,CAACgB,UAAD,CAFuB;AAGlDf,MAAAA,WAAW,EAAXA,WAHkD;AAIlDU,MAAAA,QAAQ,EAARA,QAJkD;AAKlDF,MAAAA,eAAe,EAAfA,eALkD;AAMlDU,MAAAA,UAAU,EAAEjB,UAAU,IAAIC,QANwB;AAOlDI,MAAAA,UAAU,EAAVA,UAPkD;AAQlDH,MAAAA,WAAW,EAAXA,WARkD;AASlDC,MAAAA,eAAe,EAAfA,eATkD;AAUlDC,MAAAA,kBAAkB,EAAlBA,kBAVkD;AAWlDc,MAAAA,OAAO,EAAEJ,UAAU,GAAG;AAX4B,KAApC,CAAhB;AAaAA,IAAAA,UAAU;AACX;;AAED,SAAO;AACLK,IAAAA,MAAM,EAAEvB,UAAU,CAACwB,GAAX,CAAe,UAACzB,SAAD,EAAY0B,CAAZ;AAAA,aAAmB;AACxCC,QAAAA,EAAE,EAAED,CAAC,GAAG,CADgC;AAExCE,QAAAA,IAAI,EAAE5B,SAFkC;AAGxCD,QAAAA,IAAI,EAAEmB,UAAU,CAACQ,CAAD;AAHwB,OAAnB;AAAA,KAAf,CADH;AAMLf,IAAAA,mBAAmB,EAAnBA,mBANK;AAOLE,IAAAA,YAAY,EAAZA;AAPK,GAAP;AASD","sourcesContent":["import generateWorksheet from './worksheet'\r\nimport initStyles from './styles'\r\nimport initSharedStrings from './sharedStrings'\r\n\r\nexport function generateSheets({\r\n  data,\r\n  sheetName,\r\n  sheetNames,\r\n  schema,\r\n  columns,\r\n  headerStyle,\r\n  fontFamily,\r\n  fontSize,\r\n  orientation,\r\n  stickyRowsCount,\r\n  stickyColumnsCount,\r\n  dateFormat\r\n}) {\r\n  const { getSharedStringsXml, getSharedString } = initSharedStrings()\r\n  const { getStylesXml, getStyle } = initStyles({ fontFamily, fontSize })\r\n\r\n  // Versions before `1.3.4` had a bug:\r\n  // In a \"write multiple sheets\" scenario, `columns` parameter\r\n  // wasn't required to be an array of `columns` for each sheet.\r\n  if (sheetNames) {\r\n    if (columns) {\r\n      if (!Array.isArray(columns[0])) {\r\n        throw new Error('In a \"write multiple sheets\" scenario, `columns` parameter must be an array of `columns` for each sheet.');\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!sheetNames) {\r\n    sheetNames = [sheetName || 'Sheet1']\r\n    data = [data]\r\n    if (columns) {\r\n      columns = [columns]\r\n    }\r\n    if (schema) {\r\n      schema = [schema]\r\n    }\r\n  }\r\n\r\n  const worksheets = []\r\n  let sheetIndex = 0\r\n  for (const sheet of sheetNames) {\r\n    worksheets.push(generateWorksheet(data[sheetIndex], {\r\n      schema: schema && schema[sheetIndex],\r\n      columns: columns && columns[sheetIndex],\r\n      headerStyle,\r\n      getStyle,\r\n      getSharedString,\r\n      customFont: fontFamily || fontSize,\r\n      dateFormat,\r\n      orientation,\r\n      stickyRowsCount,\r\n      stickyColumnsCount,\r\n      sheetId: sheetIndex + 1\r\n    }))\r\n    sheetIndex++\r\n  }\r\n\r\n  return {\r\n    sheets: sheetNames.map((sheetName, i) => ({\r\n      id: i + 1,\r\n      name: sheetName,\r\n      data: worksheets[i]\r\n    })),\r\n    getSharedStringsXml,\r\n    getStylesXml\r\n  }\r\n}"],"file":"writeXlsxFile.common.js"}