{"version":3,"sources":["../../source/write/writeXlsxFileBrowser.js"],"names":["JSZip","FileSaver","generateWorkbookXml","generateWorkbookXmlRels","rels","contentTypes","generateSheets","writeXlsxFile","data","fileName","rest","generateXlsxFile","then","blob","saveAs","sheetName","sheet","sheetNames","sheets","schema","columns","headerStyle","fontFamily","fontSize","orientation","stickyRowsCount","stickyColumnsCount","dateFormat","zip","file","getSharedStringsXml","getStylesXml","xl","folder","id","generateAsync","type","mimeType"],"mappings":"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","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/zipcelx.js\r\n\r\nimport JSZip from 'jszip'\r\nimport FileSaver from 'file-saver'\r\n\r\nimport generateWorkbookXml from './statics/workbook.xml'\r\nimport generateWorkbookXmlRels from './statics/workbook.xml.rels'\r\nimport rels from './statics/rels'\r\nimport contentTypes from './statics/[Content_Types].xml'\r\n\r\nimport { generateSheets } from './writeXlsxFile.common'\r\n\r\nexport default function writeXlsxFile(data, { fileName, ...rest } = {}) {\r\n  return generateXlsxFile(data, rest).then((blob) => {\r\n    if (fileName) {\r\n      return FileSaver.saveAs(blob, fileName)\r\n    }\r\n    return blob\r\n  })\r\n}\r\n\r\n/**\r\n * Writes an *.xlsx file into a \"blob\".\r\n * https://github.com/egeriis/zipcelx/issues/68\r\n * \"The reason if you want to send the excel file or store it natively on Cordova/capacitor app\".\r\n * @return {Blob}\r\n */\r\nfunction generateXlsxFile(data, {\r\n  sheet: sheetName,\r\n  sheets: sheetNames,\r\n  schema,\r\n  columns,\r\n  headerStyle,\r\n  fontFamily,\r\n  fontSize,\r\n  orientation,\r\n  stickyRowsCount,\r\n  stickyColumnsCount,\r\n  dateFormat\r\n}) {\r\n  const zip = new JSZip()\r\n\r\n  zip.file('_rels/.rels', rels)\r\n  zip.file('[Content_Types].xml', contentTypes)\r\n\r\n  const {\r\n    sheets,\r\n    getSharedStringsXml,\r\n    getStylesXml\r\n  } = generateSheets({\r\n    data,\r\n    sheetName,\r\n    sheetNames,\r\n    schema,\r\n    columns,\r\n    headerStyle,\r\n    fontFamily,\r\n    fontSize,\r\n    orientation,\r\n    stickyRowsCount,\r\n    stickyColumnsCount,\r\n    dateFormat\r\n  })\r\n\r\n  const xl = zip.folder('xl')\r\n  xl.file('_rels/workbook.xml.rels', generateWorkbookXmlRels({ sheets }))\r\n  xl.file('workbook.xml', generateWorkbookXml({ sheets }))\r\n  xl.file('styles.xml', getStylesXml())\r\n  xl.file('sharedStrings.xml', getSharedStringsXml())\r\n\r\n  for (const { id, data } of sheets) {\r\n    xl.file(`worksheets/sheet${id}.xml`, data)\r\n  }\r\n\r\n  return zip.generateAsync({\r\n    type: 'blob',\r\n    mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n  })\r\n}"],"file":"writeXlsxFileBrowser.js"}