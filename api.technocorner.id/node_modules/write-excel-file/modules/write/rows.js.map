{"version":3,"sources":["../../source/write/rows.js"],"names":["generateRow","generateRows","data","schema","headerStyle","getStyle","getSharedString","customFont","dateFormat","header","column","map","type","String","value","align","DEFAULT_HEADER_STYLE","concat","row","index","usesSchema","undefined","join","fontWeight"],"mappings":";;;;;;;;;;;;AAAA;AACA;AAEA,OAAOA,WAAP,MAAwB,OAAxB;AAEA,eAAe,SAASC,YAAT,CAAsBC,IAAtB,QAOZ;AAAA,MANFC,MAME,QANFA,MAME;AAAA,MALFC,WAKE,QALFA,WAKE;AAAA,MAJFC,QAIE,QAJFA,QAIE;AAAA,MAHFC,eAGE,QAHFA,eAGE;AAAA,MAFFC,UAEE,QAFFA,UAEE;AAAA,MADFC,UACE,QADFA,UACE;;AACF,MAAIL,MAAJ,EAAY;AACX,QAAIM,MAAM,GAAG,EAAb;;AACA,yDAAqBN,MAArB,wCAA6B;AAAA,UAAlBO,MAAkB;;AAC5B;AACA;AACA,UAAIA,MAAM,CAACA,MAAX,EAAmB;AAClBD,QAAAA,MAAM,GAAG,CAACN,MAAM,CAACQ,GAAP,CAAW,UAACD,MAAD;AAAA;AACpBE,YAAAA,IAAI,EAAEC,MADc;AAEpBC,YAAAA,KAAK,EAAEJ,MAAM,CAACA,MAFM;AAGpBK,YAAAA,KAAK,EAAEL,MAAM,CAACK;AAHM,aAKhBX,WAAW,IAAIY,oBALC;AAAA,SAAX,CAAD,CAAT;AAOA;AACA;AACD;;AACDd,IAAAA,IAAI,GAAGO,MAAM,CAACQ,MAAP,CAAcf,IAAI,CAACS,GAAL,CAAS,UAACO,GAAD;AAAA,aAASf,MAAM,CAACQ,GAAP,CACtC,UAACD,MAAD;AAAA,+CACIA,MADJ;AAECI,UAAAA,KAAK,EAAEJ,MAAM,CAACI,KAAP,CAAaI,GAAb;AAFR;AAAA,OADsC,CAAT;AAAA,KAAT,CAAd,CAAP;AAMA;;AACD,SAAOhB,IAAI,CAACS,GAAL,CAAS,UAACO,GAAD,EAAMC,KAAN;AAAA,WAAgBnB,WAAW,CAACkB,GAAD,EAAMC,KAAN,EAAa;AACvDd,MAAAA,QAAQ,EAARA,QADuD;AAEvDC,MAAAA,eAAe,EAAfA,eAFuD;AAGvDC,MAAAA,UAAU,EAAVA,UAHuD;AAIvDC,MAAAA,UAAU,EAAVA,UAJuD;AAKvDY,MAAAA,UAAU,EAAEjB,MAAM,KAAKkB;AALgC,KAAb,CAA3B;AAAA,GAAT,EAMHC,IANG,CAME,EANF,CAAP;AAOA;AAED,IAAMN,oBAAoB,GAAG;AAC5BO,EAAAA,UAAU,EAAE;AADgB,CAA7B","sourcesContent":["// Copy-pasted from:\r\n// https://github.com/davidramos-om/zipcelx-on-steroids/blob/master/src/formatters/rows/generatorRows.js\r\n\r\nimport generateRow from './row'\r\n\r\nexport default function generateRows(data, {\r\n\tschema,\r\n\theaderStyle,\r\n\tgetStyle,\r\n\tgetSharedString,\r\n\tcustomFont,\r\n\tdateFormat\r\n}) {\r\n\tif (schema) {\r\n\t\tlet header = [];\r\n\t\tfor (const column of schema) {\r\n\t\t\t// If at least one schema column has a title,\r\n\t\t\t// then print a header row.\r\n\t\t\tif (column.column) {\r\n\t\t\t\theader = [schema.map((column) => ({\r\n\t\t\t\t\ttype: String,\r\n\t\t\t\t\tvalue: column.column,\r\n\t\t\t\t\talign: column.align,\r\n\t\t\t\t\t// `headerStyle` also overwrites `align`, if specified.\r\n\t\t\t\t\t...(headerStyle || DEFAULT_HEADER_STYLE)\r\n\t\t\t\t}))]\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\tdata = header.concat(data.map((row) => schema.map(\r\n\t\t\t(column) => ({\r\n\t\t\t\t...column,\r\n\t\t\t\tvalue: column.value(row)\r\n\t\t\t})\r\n\t\t)))\r\n\t}\r\n\treturn data.map((row, index) => generateRow(row, index, {\r\n\t\tgetStyle,\r\n\t\tgetSharedString,\r\n\t\tcustomFont,\r\n\t\tdateFormat,\r\n\t\tusesSchema: schema !== undefined\r\n\t})).join('')\r\n}\r\n\r\nconst DEFAULT_HEADER_STYLE = {\r\n\tfontWeight: 'bold'\r\n}"],"file":"rows.js"}