import destr from "destr";
import { snakeCase } from "scule";
import { createDefu } from "defu";
const _runtimeConfig = process.env.RUNTIME_CONFIG;
const ENV_PREFIX = "NITRO_";
const ENV_PREFIX_ALT = _runtimeConfig.nitro.envPrefix ?? process.env.NITRO_ENV_PREFIX ?? "_";
const getEnv = (key) => {
  const envKey = snakeCase(key).toUpperCase();
  return destr(process.env[ENV_PREFIX + envKey] ?? process.env[ENV_PREFIX_ALT + envKey]);
};
const mergeWithEnvVariables = createDefu((obj, key, _value, namespace) => {
  const override = getEnv(namespace ? `${namespace}.${key}` : key);
  if (override !== void 0) {
    obj[key] = override;
    return true;
  }
});
const config = deepFreeze(mergeWithEnvVariables(_runtimeConfig, _runtimeConfig));
export const useRuntimeConfig = () => config;
export default config;
function deepFreeze(object) {
  const propNames = Object.getOwnPropertyNames(object);
  for (const name of propNames) {
    const value = object[name];
    if (value && typeof value === "object") {
      deepFreeze(value);
    }
  }
  return Object.freeze(object);
}
