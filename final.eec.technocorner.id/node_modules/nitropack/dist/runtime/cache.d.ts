import { H3Response } from 'h3';
import type { CompatibilityEventHandler } from 'h3';
export interface CacheEntry<T = any> {
    value?: T;
    expires?: number;
    mtime?: number;
    integrity?: string;
}
export interface CachifyOptions<T = any> {
    name?: string;
    getKey?: (...args: any[]) => string;
    transform?: (entry: CacheEntry<T>, ...args: any[]) => any;
    group?: string;
    integrity?: any;
    magAge?: number;
    swr?: boolean;
    base?: string;
}
export declare function defineCachedFunction<T = any>(fn: ((...args: any[]) => T | Promise<T>), opts: CachifyOptions<T>): (...args: any[]) => Promise<T>;
export declare const cachedFunction: typeof defineCachedFunction;
export interface ResponseCacheEntry {
    body: H3Response;
    code: number;
    headers: Record<string, string | number | string[]>;
}
export declare function defineCachedEventHandler(handler: CompatibilityEventHandler, opts?: Omit<CachifyOptions, 'getKey'>): (...args: any[]) => Promise<ResponseCacheEntry>;
export declare const cachedEventHandler: typeof defineCachedEventHandler;
